//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DragonBones_BlendModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(DragonBones.BlendMode));
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("Add", get_Add, null);
		L.RegVar("Alpha", get_Alpha, null);
		L.RegVar("Darken", get_Darken, null);
		L.RegVar("Difference", get_Difference, null);
		L.RegVar("Erase", get_Erase, null);
		L.RegVar("HardLight", get_HardLight, null);
		L.RegVar("Invert", get_Invert, null);
		L.RegVar("Layer", get_Layer, null);
		L.RegVar("Lighten", get_Lighten, null);
		L.RegVar("Multiply", get_Multiply, null);
		L.RegVar("Overlay", get_Overlay, null);
		L.RegVar("Screen", get_Screen, null);
		L.RegVar("Subtract", get_Subtract, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<DragonBones.BlendMode>.Check = CheckType;
		StackTraits<DragonBones.BlendMode>.Push = Push;
	}

	static void Push(IntPtr L, DragonBones.BlendMode arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(DragonBones.BlendMode), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Add(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Add);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Alpha(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Alpha);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Darken(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Darken);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Difference(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Difference);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Erase(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Erase);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HardLight(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.HardLight);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Invert(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Invert);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Layer(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Layer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Lighten(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Lighten);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Multiply(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Multiply);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Overlay(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Overlay);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Screen(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Screen);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Subtract(IntPtr L)
	{
		ToLua.Push(L, DragonBones.BlendMode.Subtract);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		DragonBones.BlendMode o = (DragonBones.BlendMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

