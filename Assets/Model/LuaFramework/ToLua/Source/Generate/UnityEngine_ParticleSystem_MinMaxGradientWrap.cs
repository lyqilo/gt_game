//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_MinMaxGradientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.MinMaxGradient), null);
		L.RegFunction("Evaluate", Evaluate);
		L.RegFunction("New", _CreateUnityEngine_ParticleSystem_MinMaxGradient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mode", get_mode, set_mode);
		L.RegVar("gradientMax", get_gradientMax, set_gradientMax);
		L.RegVar("gradientMin", get_gradientMin, set_gradientMin);
		L.RegVar("colorMax", get_colorMax, set_colorMax);
		L.RegVar("colorMin", get_colorMin, set_colorMin);
		L.RegVar("color", get_color, set_color);
		L.RegVar("gradient", get_gradient, set_gradient);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_MinMaxGradient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Color>(L, 1))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.ParticleSystem.MinMaxGradient obj = new UnityEngine.ParticleSystem.MinMaxGradient(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Gradient>(L, 1))
			{
				UnityEngine.Gradient arg0 = (UnityEngine.Gradient)ToLua.ToObject(L, 1);
				UnityEngine.ParticleSystem.MinMaxGradient obj = new UnityEngine.ParticleSystem.MinMaxGradient(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Color, UnityEngine.Color>(L, 1))
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				UnityEngine.ParticleSystem.MinMaxGradient obj = new UnityEngine.ParticleSystem.MinMaxGradient(arg0, arg1);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Gradient, UnityEngine.Gradient>(L, 1))
			{
				UnityEngine.Gradient arg0 = (UnityEngine.Gradient)ToLua.ToObject(L, 1);
				UnityEngine.Gradient arg1 = (UnityEngine.Gradient)ToLua.ToObject(L, 2);
				UnityEngine.ParticleSystem.MinMaxGradient obj = new UnityEngine.ParticleSystem.MinMaxGradient(arg0, arg1);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				UnityEngine.ParticleSystem.MinMaxGradient obj = new UnityEngine.ParticleSystem.MinMaxGradient();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.ParticleSystem.MinMaxGradient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Evaluate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)ToLua.CheckObject(L, 1, typeof(UnityEngine.ParticleSystem.MinMaxGradient));
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color o = obj.Evaluate(arg0);
				ToLua.Push(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)ToLua.CheckObject(L, 1, typeof(UnityEngine.ParticleSystem.MinMaxGradient));
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Color o = obj.Evaluate(arg0, arg1);
				ToLua.Push(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.ParticleSystem.MinMaxGradient.Evaluate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.ParticleSystemGradientMode ret = obj.mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradientMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient ret = obj.gradientMax;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradientMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradientMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient ret = obj.gradientMin;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradientMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color ret = obj.colorMax;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color ret = obj.colorMin;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient ret = obj.gradient;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradient on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.ParticleSystemGradientMode arg0 = (UnityEngine.ParticleSystemGradientMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemGradientMode));
			obj.mode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradientMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient arg0 = (UnityEngine.Gradient)ToLua.CheckObject<UnityEngine.Gradient>(L, 2);
			obj.gradientMax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradientMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradientMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient arg0 = (UnityEngine.Gradient)ToLua.CheckObject<UnityEngine.Gradient>(L, 2);
			obj.gradientMin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradientMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.colorMax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorMax on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.colorMin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index colorMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxGradient obj = (UnityEngine.ParticleSystem.MinMaxGradient)o;
			UnityEngine.Gradient arg0 = (UnityEngine.Gradient)ToLua.CheckObject<UnityEngine.Gradient>(L, 2);
			obj.gradient = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gradient on a nil value");
		}
	}
}

