//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FormDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FormData), typeof(System.Object));
		L.RegFunction("AddField", AddField);
		L.RegFunction("AddBinaryData", AddBinaryData);
		L.RegFunction("New", _CreateFormData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("FieldNames", get_FieldNames, null);
		L.RegVar("FieldValues", get_FieldValues, null);
		L.RegVar("Form", get_Form, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFormData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FormData obj = new FormData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FormData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FormData obj = (FormData)ToLua.CheckObject<FormData>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.AddField(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBinaryData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				FormData obj = (FormData)ToLua.CheckObject<FormData>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				obj.AddBinaryData(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				FormData obj = (FormData)ToLua.CheckObject<FormData>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.AddBinaryData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FormData.AddBinaryData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FieldNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FormData obj = (FormData)o;
			System.Collections.Generic.List<string> ret = obj.FieldNames;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FieldNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FieldValues(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FormData obj = (FormData)o;
			System.Collections.Generic.List<string> ret = obj.FieldValues;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FieldValues on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Form(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FormData obj = (FormData)o;
			UnityEngine.WWWForm ret = obj.Form;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Form on a nil value");
		}
	}
}

