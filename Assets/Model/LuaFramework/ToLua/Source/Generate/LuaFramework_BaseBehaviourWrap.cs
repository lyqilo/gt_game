//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_BaseBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.BaseBehaviour), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("CallFunc", CallFunc);
		L.RegFunction("SetLuaTab", SetLuaTab);
		L.RegFunction("addExcludeFuncName", addExcludeFuncName);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("lua", get_lua, set_lua);
		L.RegVar("mLuaTable", get_mLuaTable, set_mLuaTable);
		L.RegVar("mLuaFileName", get_mLuaFileName, set_mLuaFileName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallFunc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<LuaFramework.BaseBehaviour, LuaInterface.LuaFunction>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)ToLua.ToObject(L, 1);
				LuaFunction arg0 = ToLua.ToLuaFunction(L, 2);
				object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
				obj.CallFunc(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<LuaFramework.BaseBehaviour, string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
				obj.CallFunc(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.BaseBehaviour.CallFunc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaTab(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)ToLua.CheckObject<LuaFramework.BaseBehaviour>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				obj.SetLuaTab(arg0);
				return 0;
			}
			else if (count == 3)
			{
				LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)ToLua.CheckObject<LuaFramework.BaseBehaviour>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.SetLuaTab(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.BaseBehaviour.SetLuaTab");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addExcludeFuncName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)ToLua.CheckObject<LuaFramework.BaseBehaviour>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.addExcludeFuncName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			LuaFramework.LuaManager ret = obj.lua;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLuaTable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			LuaInterface.LuaTable ret = obj.mLuaTable;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mLuaTable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLuaFileName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			string ret = obj.mLuaFileName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mLuaFileName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			LuaFramework.LuaManager arg0 = (LuaFramework.LuaManager)ToLua.CheckObject<LuaFramework.LuaManager>(L, 2);
			obj.lua = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLuaTable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.mLuaTable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mLuaTable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLuaFileName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.BaseBehaviour obj = (LuaFramework.BaseBehaviour)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mLuaFileName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mLuaFileName on a nil value");
		}
	}
}

