//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_ValueConfigerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.ValueConfiger), null);
		L.RegFunction("isAudit", isAudit);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("GetModule", GetModule);
		L.RegFunction("Count", Count);
		L.RegFunction("Remove", Remove);
		L.RegFunction("Add", Add);
		L.RegFunction("Exist", Exist);
		L.RegFunction("New", _CreateLuaFramework_ValueConfiger);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AuthCode", get_AuthCode, set_AuthCode);
		L.RegVar("Version", get_Version, set_Version);
		L.RegVar("Extend", get_Extend, set_Extend);
		L.RegVar("UpdateUrl", get_UpdateUrl, set_UpdateUrl);
		L.RegVar("AuditPak", get_AuditPak, set_AuditPak);
		L.RegVar("JsonData", get_JsonData, set_JsonData);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFramework_ValueConfiger(IntPtr L)
	{
		LuaFramework.ValueConfiger obj = new LuaFramework.ValueConfiger();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isAudit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.isAudit(arg0);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.BaseValueConfigerJson o = obj.GetValue(arg0);
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.BaseValueConfigerJson[] o = obj.GetModule(arg0);
			ToLua.Push(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Count(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			int o = obj.Count();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			string arg0 = ToLua.CheckString(L, 2);
			obj.Remove(arg0);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<LuaFramework.BaseValueConfigerJson[]>(L, 2))
			{
				LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
				LuaFramework.BaseValueConfigerJson[] arg0 = ToLua.ToStructArray<LuaFramework.BaseValueConfigerJson>(L, 2);
				obj.Add(arg0);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson>>(L, 2))
			{
				LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
				System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson> arg0 = (System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson>)ToLua.ToObject(L, 2);
				obj.Add(arg0);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else if (count == 3)
			{
				LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
				string arg0 = ToLua.CheckString(L, 2);
				LuaFramework.BaseValueConfigerJson arg1 = StackTraits<LuaFramework.BaseValueConfigerJson>.Check(L, 3);
				obj.Add(arg0, arg1);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.ValueConfiger.Add");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Exist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)ToLua.CheckObject(L, 1, typeof(LuaFramework.ValueConfiger));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Exist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AuthCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string ret = obj.AuthCode;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuthCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			int ret = obj.Version;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Extend(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string ret = obj.Extend;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Extend on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string ret = obj.UpdateUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateUrl on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AuditPak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string[] ret = obj.AuditPak;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuditPak on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JsonData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson> ret = obj.JsonData;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AuthCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.AuthCode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuthCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Version(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Version = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Version on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Extend(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Extend = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Extend on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UpdateUrl = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UpdateUrl on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AuditPak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.AuditPak = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuditPak on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JsonData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.ValueConfiger obj = (LuaFramework.ValueConfiger)o;
			System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson> arg0 = (System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,LuaFramework.BaseValueConfigerJson>));
			obj.JsonData = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index JsonData on a nil value");
		}
	}
}

