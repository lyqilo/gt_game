//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_TouchTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.TouchType));
		L.RegVar("Direct", get_Direct, null);
		L.RegVar("Indirect", get_Indirect, null);
		L.RegVar("Stylus", get_Stylus, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.TouchType>.Check = CheckType;
		StackTraits<UnityEngine.TouchType>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.TouchType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.TouchType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Direct(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TouchType.Direct);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Indirect(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TouchType.Indirect);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stylus(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TouchType.Stylus);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.TouchType o = (UnityEngine.TouchType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

