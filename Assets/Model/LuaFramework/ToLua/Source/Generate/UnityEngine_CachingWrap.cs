//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_CachingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Caching), typeof(System.Object));
		L.RegFunction("ClearCache", ClearCache);
		L.RegFunction("ClearCachedVersion", ClearCachedVersion);
		L.RegFunction("ClearOtherCachedVersions", ClearOtherCachedVersions);
		L.RegFunction("ClearAllCachedVersions", ClearAllCachedVersions);
		L.RegFunction("GetCachedVersions", GetCachedVersions);
		L.RegFunction("IsVersionCached", IsVersionCached);
		L.RegFunction("MarkAsUsed", MarkAsUsed);
		L.RegFunction("AddCache", AddCache);
		L.RegFunction("GetCacheAt", GetCacheAt);
		L.RegFunction("GetCacheByPath", GetCacheByPath);
		L.RegFunction("GetAllCachePaths", GetAllCachePaths);
		L.RegFunction("RemoveCache", RemoveCache);
		L.RegFunction("MoveCacheBefore", MoveCacheBefore);
		L.RegFunction("MoveCacheAfter", MoveCacheAfter);
		L.RegFunction("New", _CreateUnityEngine_Caching);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("compressionEnabled", get_compressionEnabled, set_compressionEnabled);
		L.RegVar("ready", get_ready, null);
		L.RegVar("cacheCount", get_cacheCount, null);
		L.RegVar("defaultCache", get_defaultCache, null);
		L.RegVar("currentCacheForWriting", get_currentCacheForWriting, set_currentCacheForWriting);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Caching(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Caching obj = new UnityEngine.Caching();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Caching.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCache(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				bool o = UnityEngine.Caching.ClearCache();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				bool o = UnityEngine.Caching.ClearCache(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Caching.ClearCache");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCachedVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
			bool o = UnityEngine.Caching.ClearCachedVersion(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearOtherCachedVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
			bool o = UnityEngine.Caching.ClearOtherCachedVersions(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllCachedVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = UnityEngine.Caching.ClearAllCachedVersions(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCachedVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.List<UnityEngine.Hash128> arg1 = (System.Collections.Generic.List<UnityEngine.Hash128>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Hash128>));
			UnityEngine.Caching.GetCachedVersions(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsVersionCached(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.CachedAssetBundle arg0 = StackTraits<UnityEngine.CachedAssetBundle>.Check(L, 1);
				bool o = UnityEngine.Caching.IsVersionCached(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
				bool o = UnityEngine.Caching.IsVersionCached(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Caching.IsVersionCached");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkAsUsed(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.CachedAssetBundle arg0 = StackTraits<UnityEngine.CachedAssetBundle>.Check(L, 1);
				bool o = UnityEngine.Caching.MarkAsUsed(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Hash128 arg1 = StackTraits<UnityEngine.Hash128>.Check(L, 2);
				bool o = UnityEngine.Caching.MarkAsUsed(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Caching.MarkAsUsed");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Cache o = UnityEngine.Caching.AddCache(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCacheAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Cache o = UnityEngine.Caching.GetCacheAt(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCacheByPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Cache o = UnityEngine.Caching.GetCacheByPath(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllCachePaths(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<string>));
			UnityEngine.Caching.GetAllCachePaths(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Cache arg0 = StackTraits<UnityEngine.Cache>.Check(L, 1);
			bool o = UnityEngine.Caching.RemoveCache(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveCacheBefore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Cache arg0 = StackTraits<UnityEngine.Cache>.Check(L, 1);
			UnityEngine.Cache arg1 = StackTraits<UnityEngine.Cache>.Check(L, 2);
			UnityEngine.Caching.MoveCacheBefore(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveCacheAfter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Cache arg0 = StackTraits<UnityEngine.Cache>.Check(L, 1);
			UnityEngine.Cache arg1 = StackTraits<UnityEngine.Cache>.Check(L, 2);
			UnityEngine.Caching.MoveCacheAfter(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_compressionEnabled(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Caching.compressionEnabled);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ready(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Caching.ready);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cacheCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.Caching.cacheCount);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultCache(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Caching.defaultCache);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentCacheForWriting(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Caching.currentCacheForWriting);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_compressionEnabled(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Caching.compressionEnabled = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentCacheForWriting(IntPtr L)
	{
		try
		{
			UnityEngine.Cache arg0 = StackTraits<UnityEngine.Cache>.Check(L, 2);
			UnityEngine.Caching.currentCacheForWriting = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

