//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ImageAnimaWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ImageAnima), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Play", Play);
		L.RegFunction("PlayAlways", PlayAlways);
		L.RegFunction("Stop", Stop);
		L.RegFunction("StopPlay", StopPlay);
		L.RegFunction("StopAndRevert", StopAndRevert);
		L.RegFunction("AddEvent", AddEvent);
		L.RegFunction("RemoveEvent", RemoveEvent);
		L.RegFunction("SetEndEvent", SetEndEvent);
		L.RegFunction("ClearEndEvent", ClearEndEvent);
		L.RegFunction("AddSprite", AddSprite);
		L.RegFunction("InsertSprite", InsertSprite);
		L.RegFunction("AddNullSprite", AddNullSprite);
		L.RegFunction("ClearAll", ClearAll);
		L.RegFunction("SetDefaultSprite", SetDefaultSprite);
		L.RegFunction("RemoveSprite", RemoveSprite);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("curFrame", get_curFrame, set_curFrame);
		L.RegVar("fDelta", get_fDelta, set_fDelta);
		L.RegVar("fSep", get_fSep, set_fSep);
		L.RegVar("movieName", get_movieName, set_movieName);
		L.RegVar("lSprites", get_lSprites, set_lSprites);
		L.RegVar("defaultSprite", get_defaultSprite, set_defaultSprite);
		L.RegVar("shower", get_shower, set_shower);
		L.RegVar("dMovieEvents", get_dMovieEvents, set_dMovieEvents);
		L.RegVar("debugPlayer", get_debugPlayer, set_debugPlayer);
		L.RegVar("isPlaying", get_isPlaying, set_isPlaying);
		L.RegVar("playerAlways", get_playerAlways, set_playerAlways);
		L.RegVar("playerCount", get_playerCount, set_playerCount);
		L.RegVar("actionOverEvent", get_actionOverEvent, set_actionOverEvent);
		L.RegVar("actionOverObj", get_actionOverObj, set_actionOverObj);
		L.RegVar("showerWidth", get_showerWidth, null);
		L.RegVar("showerHeight", get_showerHeight, null);
		L.RegVar("FrameCount", get_FrameCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				obj.Play();
				return 0;
			}
			else if (count == 2)
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Play(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ImageAnima.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAlways(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.PlayAlways();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopPlay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.StopPlay();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAndRevert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.StopAndRevert();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.AddEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.RemoveEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEndEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.SetEndEvent(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.SetEndEvent(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ImageAnima.SetEndEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearEndEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.ClearEndEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckObject(L, 2, typeof(UnityEngine.Sprite));
			obj.AddSprite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckObject(L, 2, typeof(UnityEngine.Sprite));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.InsertSprite(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddNullSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.AddNullSprite();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			obj.ClearAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDefaultSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckObject(L, 2, typeof(UnityEngine.Sprite));
			obj.SetDefaultSprite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSprite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.RemoveSprite(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Sprite>(L, 2))
			{
				ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
				UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.ToObject(L, 2);
				obj.RemoveSprite(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ImageAnima.RemoveSprite");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ImageAnima obj = (ImageAnima)ToLua.CheckObject<ImageAnima>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Sprite o = obj.GetSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curFrame(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			int ret = obj.curFrame;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curFrame on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float ret = obj.fDelta;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fSep(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float ret = obj.fSep;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fSep on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movieName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			string ret = obj.movieName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movieName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lSprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			System.Collections.Generic.List<UnityEngine.Sprite> ret = obj.lSprites;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lSprites on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultSprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			UnityEngine.Sprite ret = obj.defaultSprite;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index defaultSprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			UnityEngine.UI.Image ret = obj.shower;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dMovieEvents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			System.Collections.Generic.Dictionary<int,System.Collections.Generic.List<object>> ret = obj.dMovieEvents;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dMovieEvents on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_debugPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool ret = obj.debugPlayer;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPlayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlaying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool ret = obj.isPlaying;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlaying on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerAlways(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool ret = obj.playerAlways;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerAlways on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			int ret = obj.playerCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_actionOverEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			object ret = obj.actionOverEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionOverEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_actionOverObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			LuaInterface.LuaTable ret = obj.actionOverObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionOverObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showerWidth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float ret = obj.showerWidth;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showerWidth on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showerHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float ret = obj.showerHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showerHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			int ret = obj.FrameCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FrameCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curFrame(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.curFrame = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curFrame on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.fDelta = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fSep(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.fSep = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fSep on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_movieName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.movieName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index movieName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lSprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			System.Collections.Generic.List<UnityEngine.Sprite> arg0 = (System.Collections.Generic.List<UnityEngine.Sprite>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Sprite>));
			obj.lSprites = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lSprites on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckObject(L, 2, typeof(UnityEngine.Sprite));
			obj.defaultSprite = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index defaultSprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 2);
			obj.shower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dMovieEvents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			System.Collections.Generic.Dictionary<int,System.Collections.Generic.List<object>> arg0 = (System.Collections.Generic.Dictionary<int,System.Collections.Generic.List<object>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,System.Collections.Generic.List<object>>));
			obj.dMovieEvents = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dMovieEvents on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_debugPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.debugPlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index debugPlayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isPlaying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isPlaying = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlaying on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playerAlways(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.playerAlways = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerAlways on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.playerCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_actionOverEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.actionOverEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionOverEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_actionOverObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageAnima obj = (ImageAnima)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.actionOverObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionOverObj on a nil value");
		}
	}
}

