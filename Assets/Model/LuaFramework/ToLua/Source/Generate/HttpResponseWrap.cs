//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpResponseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HttpResponse), typeof(System.Object));
		L.RegFunction("GetResponseText", GetResponseText);
		L.RegFunction("SaveResponseToFile", SaveResponseToFile);
		L.RegFunction("New", _CreateHttpResponse);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("StatusCode", get_StatusCode, set_StatusCode);
		L.RegVar("Error", get_Error, set_Error);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHttpResponse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HttpResponse obj = new HttpResponse();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				HttpResponse obj = new HttpResponse(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HttpResponse.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponseText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HttpResponse obj = (HttpResponse)ToLua.CheckObject<HttpResponse>(L, 1);
			string o = obj.GetResponseText();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveResponseToFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HttpResponse obj = (HttpResponse)ToLua.CheckObject<HttpResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SaveResponseToFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StatusCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpResponse obj = (HttpResponse)o;
			int ret = obj.StatusCode;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpResponse obj = (HttpResponse)o;
			string ret = obj.Error;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StatusCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpResponse obj = (HttpResponse)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.StatusCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpResponse obj = (HttpResponse)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Error = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Error on a nil value");
		}
	}
}

