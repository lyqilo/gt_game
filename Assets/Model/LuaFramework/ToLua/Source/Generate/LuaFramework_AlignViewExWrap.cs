//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_AlignViewExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.AlignViewEx), typeof(LuaFramework.BaseBehaviour));
		L.RegFunction("arrangePos", arrangePos);
		L.RegFunction("setScreenArgs", setScreenArgs);
		L.RegFunction("setAlign", setAlign);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("align", get_align, set_align);
		L.RegVar("isScaleWithScreen", get_isScaleWithScreen, set_isScaleWithScreen);
		L.RegVar("isKeepPos", get_isKeepPos, set_isKeepPos);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int arrangePos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)ToLua.CheckObject<LuaFramework.AlignViewEx>(L, 1);
			obj.arrangePos();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setScreenArgs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
			LuaFramework.AlignViewEx.setScreenArgs(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAlign(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)ToLua.CheckObject<LuaFramework.AlignViewEx>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setAlign(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_align(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			LuaFramework.AlignEx ret = obj.align;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index align on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isScaleWithScreen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			bool ret = obj.isScaleWithScreen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isScaleWithScreen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isKeepPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			bool ret = obj.isKeepPos;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isKeepPos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_align(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			LuaFramework.AlignEx arg0 = (LuaFramework.AlignEx)ToLua.CheckObject(L, 2, typeof(LuaFramework.AlignEx));
			obj.align = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index align on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isScaleWithScreen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isScaleWithScreen = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isScaleWithScreen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isKeepPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.AlignViewEx obj = (LuaFramework.AlignViewEx)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isKeepPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isKeepPos on a nil value");
		}
	}
}

