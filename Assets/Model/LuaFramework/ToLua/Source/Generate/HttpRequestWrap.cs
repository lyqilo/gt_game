//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HttpRequest), typeof(System.Object));
		L.RegFunction("SetPostData", SetPostData);
		L.RegFunction("AddPostData", AddPostData);
		L.RegFunction("SetProxy", SetProxy);
		L.RegFunction("Start", Start);
		L.RegFunction("New", _CreateHttpRequest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("ERR_EXCEPTION", -1);
		L.RegVar("ContentType", null, set_ContentType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHttpRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Action<HttpResponse> arg3 = (System.Action<HttpResponse>)ToLua.CheckDelegate<System.Action<HttpResponse>>(L, 4);
				HttpRequest obj = new HttpRequest(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HttpRequest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPostData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HttpRequest obj = (HttpRequest)ToLua.CheckObject<HttpRequest>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetPostData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPostData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			HttpRequest obj = (HttpRequest)ToLua.CheckObject<HttpRequest>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.AddPostData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			HttpRequest obj = (HttpRequest)ToLua.CheckObject<HttpRequest>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetProxy(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			HttpRequest obj = (HttpRequest)ToLua.CheckObject<HttpRequest>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			HttpRequest obj = (HttpRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ContentType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}
}

