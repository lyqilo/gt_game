//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TweenTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(TweenType));
		L.RegVar("Pos", get_Pos, null);
		L.RegVar("Scale", get_Scale, null);
		L.RegVar("Rotate", get_Rotate, null);
		L.RegVar("Num", get_Num, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<TweenType>.Check = CheckType;
		StackTraits<TweenType>.Push = Push;
	}

	static void Push(IntPtr L, TweenType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(TweenType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pos(IntPtr L)
	{
		ToLua.Push(L, TweenType.Pos);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Scale(IntPtr L)
	{
		ToLua.Push(L, TweenType.Scale);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Rotate(IntPtr L)
	{
		ToLua.Push(L, TweenType.Rotate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Num(IntPtr L)
	{
		ToLua.Push(L, TweenType.Num);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		TweenType o = (TweenType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

