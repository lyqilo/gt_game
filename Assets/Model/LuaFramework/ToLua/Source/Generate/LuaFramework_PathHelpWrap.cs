//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_PathHelpWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PathHelp");
		L.RegFunction("GetAllFiles", GetAllFiles);
		L.RegFunction("GetFileSize", GetFileSize);
		L.RegVar("AssemblyCSharpPath", get_AssemblyCSharpPath, null);
		L.RegVar("AssemblyDirectory", get_AssemblyDirectory, null);
		L.RegVar("AssemblyCSharpEditorPath", get_AssemblyCSharpEditorPath, null);
		L.RegVar("AppHotfixResPath", get_AppHotfixResPath, null);
		L.RegVar("AppResPath", get_AppResPath, null);
		L.RegVar("RelativePath", get_RelativePath, null);
		L.RegVar("PathPrefix", get_PathPrefix, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllFiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<string> o = LuaFramework.PathHelp.GetAllFiles(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<string> arg1 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
				System.Collections.Generic.List<string> o = LuaFramework.PathHelp.GetAllFiles(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.PathHelp.GetAllFiles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			long o = LuaFramework.PathHelp.GetFileSize(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssemblyCSharpPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.AssemblyCSharpPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssemblyDirectory(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.AssemblyDirectory);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssemblyCSharpEditorPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.AssemblyCSharpEditorPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppHotfixResPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.AppHotfixResPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppResPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.AppResPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RelativePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.RelativePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PathPrefix(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.PathHelp.PathPrefix);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

